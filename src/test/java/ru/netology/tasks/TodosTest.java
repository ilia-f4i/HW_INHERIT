package ru.netology.tasks;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class TodosTest {

    @Test
    public void shouldAddThreeTasksOfDifferentType() {
        SimpleTask simpleTask = new SimpleTask(5, "–ü–æ–∑–≤–æ–Ω–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è–º");
        Epic epic = new Epic(55, new String[] {"–ú–æ–ª–æ–∫–æ", "–Ø–π—Ü–∞", "–•–ª–µ–±"});
        Meeting meeting = new Meeting(555, "–í—ã–∫–∞—Ç–∫–∞ –≤–µ—Ä—Å–∏–∏", "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–ó–∞–≤—Ç—Ä–∞");

        Todos todos = new Todos();
        todos.add(simpleTask);
        todos.add(epic);
        todos.add(meeting);

        Task[] expected = {simpleTask, epic, meeting};
        Task[] actual = todos.findAll();
        assertArrayEquals(expected, actual);
    }

    @Test
    public void searchShouldReturnOnlyMatchingTasks() {
        Todos todos = new Todos();
        todos.add(new SimpleTask(1, "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ"));
        todos.add(new Epic(2, new String[]{"–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ", "–ö—É–ø–∏—Ç—å —Ö–ª–µ–±"}));
        todos.add(new Meeting(3, "–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ä–µ–ª–∏–∑–∞", "–ü—Ä–æ–µ–∫—Ç –•", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"));

        Task[] actual = todos.search("–º–æ–ª–æ–∫–æ");
        assertEquals(1, actual.length);
        assertEquals(2, actual[0].getId());
    }
    @Test
    public void shouldAddTasksAndReturnAll() {
        SimpleTask task = new SimpleTask(1, "–ü–æ–∑–≤–æ–Ω–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è–º");
        Epic epic = new Epic(2, new String[] {"–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ", "–ö—É–ø–∏—Ç—å —Ö–ª–µ–±"});
        Meeting meeting = new Meeting(3, "–°–æ–∑–≤–æ–Ω –ø–æ –ø—Ä–æ–µ–∫—Ç—É", "–ë–∞–Ω–∫–æ–≤—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–ü—è—Ç–Ω–∏—Ü–∞");

        Todos todos = new Todos();
        todos.add(task);
        todos.add(epic);
        todos.add(meeting);

        Task[] expected = {task, epic, meeting};
        Task[] actual = todos.findAll();
        assertArrayEquals(expected, actual);
    }

    @Test
    public void shouldFindTasksByQuery_MatchOne() {
        Todos todos = new Todos();
        todos.add(new SimpleTask(1, "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ"));
        todos.add(new Epic(2, new String[] {"–°—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω", "–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ"}));
        todos.add(new Meeting(3, "–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ä–µ–ª–∏–∑–∞", "–ü—Ä–æ–µ–∫—Ç –•", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"));

        Task[] result = todos.search("–º–æ–ª–æ–∫–æ");

        assertEquals(1, result.length);
        assertEquals(2, result[0].getId());
    }

    @Test
    public void shouldFindTasksByQuery_MatchMultiple() {
        Todos todos = new Todos();
        todos.add(new SimpleTask(1, "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ"));
        todos.add(new Epic(2, new String[] {"–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ", "–ö—É–ø–∏—Ç—å —Ö–ª–µ–±"}));
        todos.add(new Meeting(3, "–û–±—Å—É–∂–¥–µ–Ω–∏–µ –º–æ–ª–æ–∫–æ", "–ü—Ä–æ–µ–∫—Ç –•", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")); // üëà –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

        Task[] result = todos.search("–º–æ–ª–æ–∫–æ");

        assertEquals(2, result.length);
    }
    @Test
    public void shouldReturnEmptyIfNoMatches() {
        Todos todos = new Todos();
        todos.add(new SimpleTask(1, "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ"));
        todos.add(new Epic(2, new String[] {"–°—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω"}));
        todos.add(new Meeting(3, "–°–æ–≤–µ—â–∞–Ω–∏–µ", "–ü—Ä–æ–µ–∫—Ç –•", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"));

        Task[] result = todos.search("–æ—Ç–ø—É—Å–∫");

        assertEquals(0, result.length);
    }
}
